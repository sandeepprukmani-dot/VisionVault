<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/packed_app.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/packed_app.py" />
              <option name="originalContent" value="import os&#10;import json&#10;import sqlite3&#10;from datetime import datetime&#10;from flask import Flask, request, jsonify, send_from_directory, Response&#10;from flask_socketio import SocketIO, emit&#10;from flask_cors import CORS&#10;import base64&#10;import ast&#10;import re&#10;import asyncio&#10;import sys&#10;from io import StringIO&#10;&#10;# --- Embedded HTML Template ---&#10;INDEX_HTML = '''&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Automation AI-Powered&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css&quot;&gt;&#10;    &lt;style&gt;&#10;        * {&#10;            margin: 0;&#10;            padding: 0;&#10;            box-sizing: border-box;&#10;        }&#10;        &#10;        body {&#10;            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;&#10;            background: #0a0a0a;&#10;            color: #ffffff;&#10;            min-height: 100vh;&#10;            overflow-x: hidden;&#10;        }&#10;        &#10;        /* Custom styles for the application */&#10;        .container {&#10;            max-width: 1200px;&#10;            margin: 0 auto;&#10;            padding: 20px;&#10;        }&#10;        &#10;        h1, h2, h3 {&#10;            color: #ffffff;&#10;        }&#10;        &#10;        a {&#10;            color: #007bff;&#10;            text-decoration: none;&#10;        }&#10;        &#10;        a:hover {&#10;            text-decoration: underline;&#10;        }&#10;        &#10;        .btn-primary {&#10;            background-color: #007bff;&#10;            border-color: #007bff;&#10;        }&#10;        &#10;        .btn-primary:hover {&#10;            background-color: #0056b3;&#10;            border-color: #004085;&#10;        }&#10;        &#10;        /* ...rest of CSS from index.html... */&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;container&quot;&gt;&#10;        &lt;h1&gt;Automation AI-Powered&lt;/h1&gt;&#10;        &lt;p&gt;Welcome to the Automation AI-Powered platform. Here you can execute your automated tests with ease.&lt;/p&gt;&#10;        &#10;        &lt;h2&gt;Test History&lt;/h2&gt;&#10;        &lt;div id=&quot;history&quot;&gt;&#10;            &lt;!-- Test history will be populated here by JavaScript --&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;h2&gt;Execute Test&lt;/h2&gt;&#10;        &lt;form id=&quot;execute-form&quot;&gt;&#10;            &lt;div class=&quot;mb-3&quot;&gt;&#10;                &lt;label for=&quot;command&quot; class=&quot;form-label&quot;&gt;Command&lt;/label&gt;&#10;                &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;command&quot; placeholder=&quot;Enter your command here&quot;&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;mb-3&quot;&gt;&#10;                &lt;label for=&quot;browser&quot; class=&quot;form-label&quot;&gt;Browser&lt;/label&gt;&#10;                &lt;select class=&quot;form-select&quot; id=&quot;browser&quot;&gt;&#10;                    &lt;option value=&quot;chromium&quot;&gt;Chromium&lt;/option&gt;&#10;                    &lt;option value=&quot;firefox&quot;&gt;Firefox&lt;/option&gt;&#10;                    &lt;option value=&quot;webkit&quot;&gt;WebKit&lt;/option&gt;&#10;                &lt;/select&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;mb-3&quot;&gt;&#10;                &lt;label for=&quot;mode&quot; class=&quot;form-label&quot;&gt;Mode&lt;/label&gt;&#10;                &lt;select class=&quot;form-select&quot; id=&quot;mode&quot;&gt;&#10;                    &lt;option value=&quot;headless&quot;&gt;Headless&lt;/option&gt;&#10;                    &lt;option value=&quot;headed&quot;&gt;Headed&lt;/option&gt;&#10;                &lt;/select&gt;&#10;            &lt;/div&gt;&#10;            &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Execute&lt;/button&gt;&#10;        &lt;/form&gt;&#10;        &#10;        &lt;h2&gt;Download Agent&lt;/h2&gt;&#10;        &lt;a href=&quot;/api/agent/download&quot; class=&quot;btn btn-secondary&quot;&gt;Download local_agent.py&lt;/a&gt;&#10;    &lt;/div&gt;&#10;    &#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://cdn.socket.io/4.0.0/socket.io.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        const socket = io();&#10;        &#10;        socket.on('connect', () =&gt; {&#10;            console.log('Connected to server');&#10;        });&#10;        &#10;        socket.on('disconnect', () =&gt; {&#10;            console.log('Disconnected from server');&#10;        });&#10;        &#10;        socket.on('execution_status', (data) =&gt; {&#10;            console.log('Execution status:', data);&#10;            // Update the UI with the execution status&#10;        });&#10;        &#10;        socket.on('execution_complete', (data) =&gt; {&#10;            console.log('Execution complete:', data);&#10;            // Update the UI with the execution result&#10;        });&#10;        &#10;        function fetchHistory() {&#10;            fetch('/api/history')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    const historyDiv = document.getElementById('history');&#10;                    historyDiv.innerHTML = '';&#10;                    data.forEach(row =&gt; {&#10;                        const card = document.createElement('div');&#10;                        card.className = 'card mb-3';&#10;                        card.innerHTML = `&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;h5 class=&quot;card-title&quot;&gt;Test ID: ${row.id}&lt;/h5&gt;&#10;                                &lt;p class=&quot;card-text&quot;&gt;&lt;strong&gt;Command:&lt;/strong&gt; ${row.command}&lt;/p&gt;&#10;                                &lt;p class=&quot;card-text&quot;&gt;&lt;strong&gt;Status:&lt;/strong&gt; ${row.status}&lt;/p&gt;&#10;                                &lt;p class=&quot;card-text&quot;&gt;&lt;strong&gt;Logs:&lt;/strong&gt; ${row.logs}&lt;/p&gt;&#10;                                ${row.screenshot_path ? `&lt;img src=&quot;${row.screenshot_path}&quot; class=&quot;img-fluid&quot; alt=&quot;Screenshot&quot;&gt;` : ''}&#10;                            &lt;/div&gt;&#10;                        `;&#10;                        historyDiv.appendChild(card);&#10;                    });&#10;                });&#10;        }&#10;        &#10;        document.getElementById('execute-form').addEventListener('submit', (e) =&gt; {&#10;            e.preventDefault();&#10;            const command = document.getElementById('command').value;&#10;            const browser = document.getElementById('browser').value;&#10;            const mode = document.getElementById('mode').value;&#10;            fetch('/api/execute', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({ command, browser, mode })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                console.log('Execute response:', data);&#10;                // Handle the response from the server&#10;            });&#10;        });&#10;        &#10;        fetchHistory();&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;'''&#10;&#10;# --- CodeValidator ---&#10;class CodeValidator:&#10;    ALLOWED_IMPORTS = {&#10;        'playwright.async_api', 'asyncio', 'time', 'datetime', 're', 'json', 'base64'&#10;    }&#10;    DANGEROUS_MODULES = {&#10;        'os', 'sys', 'subprocess', 'shutil', 'eval', 'exec', 'compile', '__import__', 'open', 'file', 'input', 'execfile', 'reload', 'importlib', 'pickle', 'shelve', 'socket', 'urllib', 'requests', 'http', 'ftplib', 'telnetlib', 'smtplib', 'poplib', 'imaplib'&#10;    }&#10;    def __init__(self):&#10;        self.errors = []&#10;    def validate(self, code):&#10;        self.errors = []&#10;        if not code or not isinstance(code, str):&#10;            self.errors.append(&quot;Code must be a non-empty string&quot;)&#10;            return False&#10;        if 'async def run_test' not in code:&#10;            self.errors.append(&quot;Code must contain 'async def run_test' function&quot;)&#10;            return False&#10;        if 'playwright.async_api import async_playwright' not in code:&#10;            self.errors.append(&quot;Code must use 'from playwright.async_api import async_playwright'&quot;)&#10;            return False&#10;        for module in self.DANGEROUS_MODULES:&#10;            patterns = [f'import {module}', f'from {module}', f'__import__(&quot;{module}&quot;)', f&quot;__import__('{module}')&quot;]&#10;            for pattern in patterns:&#10;                if pattern in code:&#10;                    self.errors.append(f&quot;Dangerous import detected: {module}&quot;)&#10;                    return False&#10;        dangerous_patterns = [&#10;            (r'\beval\s*\(', 'eval() function'), (r'\bexec\s*\(', 'exec() function'), (r'\b__import__\s*\(', '__import__() function'), (r'\bcompile\s*\(', 'compile() function'), (r'\bopen\s*\(', 'open() function (file access)'), (r'\.system\s*\(', 'system() call'), (r'\.popen\s*\(', 'popen() call'), (r'\.spawn\s*\(', 'spawn() call'),&#10;        ]&#10;        for pattern, name in dangerous_patterns:&#10;            if re.search(pattern, code, re.IGNORECASE):&#10;                self.errors.append(f&quot;Dangerous pattern detected: {name}&quot;)&#10;                return False&#10;        try:&#10;            tree = ast.parse(code)&#10;            for node in ast.walk(tree):&#10;                if isinstance(node, ast.Import):&#10;                    for alias in node.names:&#10;                        if not self._is_allowed_import(alias.name):&#10;                            self.errors.append(f&quot;Disallowed import: {alias.name}&quot;)&#10;                            return False&#10;                elif isinstance(node, ast.ImportFrom):&#10;                    if node.module and not self._is_allowed_import(node.module):&#10;                        self.errors.append(f&quot;Disallowed import from: {node.module}&quot;)&#10;                        return False&#10;                elif isinstance(node, ast.Call):&#10;                    if isinstance(node.func, ast.Name):&#10;                        if node.func.id in ['eval', 'exec', 'compile', '__import__', 'open']:&#10;                            self.errors.append(f&quot;Dangerous function call: {node.func.id}&quot;)&#10;                            return False&#10;        except SyntaxError as e:&#10;            self.errors.append(f&quot;Syntax error: {str(e)}&quot;)&#10;            return False&#10;        return True&#10;    def _is_allowed_import(self, module_name):&#10;        for allowed in self.ALLOWED_IMPORTS:&#10;            if module_name.startswith(allowed):&#10;                return True&#10;        return False&#10;    def get_errors(self):&#10;        return self.errors&#10;&#10;# --- ServerExecutor ---&#10;class ServerExecutor:&#10;    def execute(self, code, browser_name='chromium', headless=True):&#10;        try:&#10;            validator = CodeValidator()&#10;            if not validator.validate(code):&#10;                return {&#10;                    'success': False,&#10;                    'logs': ['Security validation failed: ' + '; '.join(validator.get_errors())],&#10;                    'screenshot': None&#10;                }&#10;            restricted_globals = {&#10;                '__builtins__': {&#10;                    'True': True, 'False': False, 'None': None, 'dict': dict, 'list': list, 'str': str, 'int': int, 'float': float, 'bool': bool, 'len': len, 'range': range, 'enumerate': enumerate, 'zip': zip, 'Exception': Exception, 'ValueError': ValueError, 'TypeError': TypeError, 'KeyError': KeyError, 'AttributeError': AttributeError, 'getattr': getattr, 'setattr': setattr, 'hasattr': hasattr, 'print': print, '__import__': __import__,&#10;                }&#10;            }&#10;            local_vars = {}&#10;            exec(code, restricted_globals, local_vars)&#10;            if 'run_test' not in local_vars:&#10;                return {&#10;                    'success': False,&#10;                    'logs': ['Error: Generated code must contain a run_test function'],&#10;                    'screenshot': None&#10;                }&#10;            run_test = local_vars['run_test']&#10;            result = asyncio.run(run_test(browser_name=browser_name, headless=headless))&#10;            return result&#10;        except Exception as e:&#10;            return {&#10;                'success': False,&#10;                'logs': [f'Execution error: {str(e)}'],&#10;                'screenshot': None&#10;            }&#10;&#10;# --- Flask App ---&#10;app = Flask(__name__)&#10;app.config['SECRET_KEY'] = os.environ.get('SESSION_SECRET', 'dev-secret-key')&#10;app.config['UPLOAD_FOLDER'] = 'uploads'&#10;CORS(app)&#10;socketio = SocketIO(app, cors_allowed_origins=&quot;*&quot;)&#10;&#10;os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)&#10;os.makedirs(os.path.join(app.config['UPLOAD_FOLDER'], 'screenshots'), exist_ok=True)&#10;os.makedirs(os.path.join(app.config['UPLOAD_FOLDER'], 'logs'), exist_ok=True)&#10;&#10;openai_api_key = os.environ.get('OPENAI_API_KEY','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')&#10;try:&#10;    from openai import OpenAI&#10;    client = OpenAI(api_key=openai_api_key) if openai_api_key else None&#10;except ImportError:&#10;    client = None&#10;&#10;connected_agents = {}&#10;&#10;def init_db():&#10;    conn = sqlite3.connect('automation.db')&#10;    c = conn.cursor()&#10;    c.execute('''CREATE TABLE IF NOT EXISTS test_history&#10;                 (id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;                  command TEXT NOT NULL,&#10;                  generated_code TEXT NOT NULL,&#10;                  browser TEXT,&#10;                  mode TEXT,&#10;                  execution_location TEXT,&#10;                  status TEXT,&#10;                  logs TEXT,&#10;                  screenshot_path TEXT,&#10;                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')&#10;    conn.commit()&#10;    conn.close()&#10;&#10;init_db()&#10;&#10;def generate_playwright_code(natural_language_command, browser='chromium'):&#10;    if not client:&#10;        raise Exception(&quot;OpenAI API key not configured. Please set the OPENAI_API_KEY environment variable.&quot;)&#10;    try:&#10;        response = client.chat.completions.create(&#10;            model=&quot;gpt-4o-mini&quot;,&#10;            messages=[&#10;                {&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;You are an expert at converting natural language commands into Playwright Python code. Generate complete, executable Playwright code that: 1. Uses async/await syntax 2. Includes proper browser launch with the specified browser 3. Has error handling 4. Returns a dict with 'success', 'logs', and 'screenshot' keys 5. Takes screenshot on success or error 6. The code should be a complete async function named 'run_test' that takes browser_name and headless parameters. Only return the function code, no explanations.&quot;},&#10;                {&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: f&quot;Convert this to Playwright code for {browser}: {natural_language_command}&quot;}&#10;            ],&#10;            temperature=0.3&#10;        )&#10;        code = response.choices[0].message.content.strip()&#10;        if code.startswith('```python'):&#10;            code = code[9:]&#10;        if code.startswith('```'):&#10;            code = code[3:]&#10;        if code.endswith('```'):&#10;            code = code[:-3]&#10;        return code.strip()&#10;    except Exception as e:&#10;        raise Exception(f&quot;OpenAI API error: {str(e)}&quot;)&#10;&#10;@app.route('/')&#10;def index():&#10;    return Response(INDEX_HTML, mimetype='text/html')&#10;&#10;@app.route('/api/history')&#10;def get_history():&#10;    conn = sqlite3.connect('automation.db')&#10;    c = conn.cursor()&#10;    c.execute('SELECT * FROM test_history ORDER BY created_at DESC LIMIT 50')&#10;    rows = c.fetchall()&#10;    conn.close()&#10;    history = []&#10;    for row in rows:&#10;        history.append({&#10;            'id': row[0], 'command': row[1], 'generated_code': row[2], 'browser': row[3], 'mode': row[4], 'execution_location': row[5], 'status': row[6], 'logs': row[7], 'screenshot_path': row[8], 'created_at': row[9]&#10;        })&#10;    return jsonify(history)&#10;&#10;@app.route('/api/execute', methods=['POST'])&#10;def execute_test():&#10;    data = request.json&#10;    command = data.get('command')&#10;    browser = data.get('browser', 'chromium')&#10;    mode = data.get('mode', 'headless')&#10;    execution_location = data.get('execution_location', 'server')&#10;    if not command:&#10;        return jsonify({'error': 'Command is required'}), 400&#10;    try:&#10;        generated_code = generate_playwright_code(command, browser)&#10;        validator = CodeValidator()&#10;        if not validator.validate(generated_code):&#10;            error_msg = &quot;Generated code failed security validation: &quot; + &quot;; &quot;.join(validator.get_errors())&#10;            return jsonify({'error': error_msg}), 400&#10;        conn = sqlite3.connect('automation.db')&#10;        c = conn.cursor()&#10;        c.execute('INSERT INTO test_history (command, generated_code, browser, mode, execution_location, status) VALUES (?, ?, ?, ?, ?, ?)', (command, generated_code, browser, mode, execution_location, 'pending'))&#10;        test_id = c.lastrowid&#10;        conn.commit()&#10;        conn.close()&#10;        if execution_location == 'server':&#10;            socketio.start_background_task(execute_on_server, test_id, generated_code, browser, mode)&#10;        else:&#10;            socketio.emit('execute_on_agent', {'test_id': test_id, 'code': generated_code, 'browser': browser, 'mode': mode})&#10;        return jsonify({'test_id': test_id, 'code': generated_code})&#10;    except Exception as e:&#10;        return jsonify({'error': str(e)}), 500&#10;&#10;def execute_on_server(test_id, code, browser, mode):&#10;    executor = ServerExecutor()&#10;    headless = mode == 'headless'&#10;    socketio.emit('execution_status', {'test_id': test_id, 'status': 'running', 'message': f'Executing on server in {mode} mode...'})&#10;    result = executor.execute(code, browser, headless)&#10;    screenshot_path = None&#10;    if result.get('screenshot'):&#10;        screenshot_path = f&quot;screenshots/test_{test_id}.png&quot;&#10;        with open(os.path.join(app.config['UPLOAD_FOLDER'], screenshot_path), 'wb') as f:&#10;            f.write(result['screenshot'])&#10;    logs_json = json.dumps(result.get('logs', []))&#10;    status = 'success' if result.get('success') else 'failed'&#10;    conn = sqlite3.connect('automation.db')&#10;    c = conn.cursor()&#10;    c.execute('UPDATE test_history SET status=?, logs=?, screenshot_path=? WHERE id=?', (status, logs_json, screenshot_path, test_id))&#10;    conn.commit()&#10;    conn.close()&#10;    socketio.emit('execution_complete', {'test_id': test_id, 'status': status, 'logs': result.get('logs', []), 'screenshot_path': screenshot_path})&#10;&#10;@app.route('/uploads/&lt;path:filename&gt;')&#10;def uploaded_file(filename):&#10;    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)&#10;&#10;@app.route('/api/agent/download')&#10;def download_agent():&#10;    return send_from_directory('.', 'local_agent.py', as_attachment=True)&#10;&#10;@socketio.on('connect')&#10;def handle_connect():&#10;    print(f'Client connected: {request.sid}')&#10;    emit('connected', {'sid': request.sid})&#10;&#10;@socketio.on('disconnect')&#10;def handle_disconnect():&#10;    print(f'Client disconnected: {request.sid}')&#10;    if request.sid in connected_agents:&#10;        del connected_agents[request.sid]&#10;        print(f'Updated connected_agents after disconnect: {connected_agents}')&#10;        socketio.emit('agents_update', {'agents': list(connected_agents.values())})&#10;&#10;@socketio.on('agent_register')&#10;def handle_agent_register(data):&#10;    agent_id = data.get('agent_id')&#10;    connected_agents[request.sid] = {'agent_id': agent_id, 'browsers': data.get('browsers', []), 'connected_at': datetime.now().isoformat()}&#10;    print(f'Agent registered: {agent_id}')&#10;    print(f'Updated connected_agents after register: {connected_agents}')&#10;    emit('agent_registered', {'status': 'success'})&#10;    print(f'Emitting agents_update: {list(connected_agents.values())}')&#10;    socketio.emit('agents_update', {'agents': list(connected_agents.values())})&#10;&#10;@socketio.on('agent_result')&#10;def handle_agent_result(data):&#10;    test_id = data.get('test_id')&#10;    success = data.get('success')&#10;    logs = data.get('logs', [])&#10;    screenshot_data = data.get('screenshot')&#10;    screenshot_path = None&#10;    if screenshot_data:&#10;        screenshot_path = f&quot;screenshots/test_{test_id}.png&quot;&#10;        screenshot_bytes = base64.b64decode(screenshot_data)&#10;        with open(os.path.join(app.config['UPLOAD_FOLDER'], screenshot_path), 'wb') as f:&#10;            f.write(screenshot_bytes)&#10;    logs_json = json.dumps(logs)&#10;    status = 'success' if success else 'failed'&#10;    conn = sqlite3.connect('automation.db')&#10;    c = conn.cursor()&#10;    c.execute('UPDATE test_history SET status=?, logs=?, screenshot_path=? WHERE id=?', (status, logs_json, screenshot_path, test_id))&#10;    conn.commit()&#10;    conn.close()&#10;    socketio.emit('execution_complete', {'test_id': test_id, 'status': status, 'logs': logs, 'screenshot_path': screenshot_path})&#10;&#10;@socketio.on('agent_log')&#10;def handle_agent_log(data):&#10;    socketio.emit('execution_status', {'test_id': data.get('test_id'), 'status': 'running', 'message': data.get('message')})&#10;&#10;if __name__ == '__main__':&#10;    socketio.run(app, port=6745, debug=True, allow_unsafe_werkzeug=True)&#10;&#10;# --- End of packed file ---&#10;" />
              <option name="updatedContent" value="import os&#10;import json&#10;import sqlite3&#10;from datetime import datetime&#10;from flask import Flask, request, jsonify, send_from_directory, Response&#10;from flask_socketio import SocketIO, emit&#10;from flask_cors import CORS&#10;import base64&#10;import ast&#10;import re&#10;import asyncio&#10;import sys&#10;from io import StringIO&#10;&#10;# --- Embedded HTML Template ---&#10;INDEX_HTML = '''&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Automation AI-Powered&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css&quot;&gt;&#10;    &lt;style&gt;&#10;        * {&#10;            margin: 0;&#10;            padding: 0;&#10;            box-sizing: border-box;&#10;        }&#10;        body {&#10;            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;&#10;            background: #0a0a0a;&#10;            color: #ffffff;&#10;            min-height: 100vh;&#10;            overflow-x: hidden;&#10;        }&#10;        .app-container {&#10;            display: flex;&#10;            min-height: 100vh;&#10;        }&#10;        .sidebar {&#10;            width: 260px;&#10;            background: #111111;&#10;            border-right: 1px solid #1f1f1f;&#10;            padding: 24px 0;&#10;            position: fixed;&#10;            height: 100vh;&#10;            left: 0;&#10;            top: 0;&#10;            z-index: 1000;&#10;            display: flex;&#10;            flex-direction: column;&#10;        }&#10;        .logo-section {&#10;            padding: 0 24px 32px 24px;&#10;            border-bottom: 1px solid #1f1f1f;&#10;        }&#10;        .logo {&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 12px;&#10;        }&#10;        .logo-icon {&#10;            width: 36px;&#10;            height: 36px;&#10;            background: linear-gradient(135deg, #8b5cf6 0%, #6d28d9 100%);&#10;            border-radius: 8px;&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            font-size: 20px;&#10;        }&#10;        .logo-text {&#10;            display: flex;&#10;            flex-direction: column;&#10;        }&#10;        .logo-title {&#10;            font-size: 15px;&#10;            font-weight: 700;&#10;            color: #ffffff;&#10;            line-height: 1.2;&#10;        }&#10;        .logo-subtitle {&#10;            font-size: 10px;&#10;            color: #8b5cf6;&#10;            font-weight: 600;&#10;            text-transform: uppercase;&#10;            letter-spacing: 0.5px;&#10;        }&#10;        .nav-section {&#10;            padding: 24px 0;&#10;            flex: 1;&#10;        }&#10;        .nav-title {&#10;            font-size: 11px;&#10;            color: #555555;&#10;            font-weight: 600;&#10;            text-transform: uppercase;&#10;            letter-spacing: 0.5px;&#10;            padding: 0 24px 12px 24px;&#10;        }&#10;        .nav-link {&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 12px;&#10;            padding: 10px 24px;&#10;            color: #888888;&#10;            text-decoration: none;&#10;            font-size: 14px;&#10;            font-weight: 500;&#10;            transition: all 0.2s;&#10;            border-left: 3px solid transparent;&#10;        }&#10;        .nav-link:hover {&#10;            color: #ffffff;&#10;            background: rgba(139, 92, 246, 0.1);&#10;        }&#10;        .nav-link.active {&#10;            color: #ffffff;&#10;            background: rgba(139, 92, 246, 0.15);&#10;            border-left-color: #8b5cf6;&#10;        }&#10;        .nav-link i {&#10;            font-size: 16px;&#10;            width: 18px;&#10;        }&#10;        .sidebar-footer {&#10;            padding: 20px 24px;&#10;            border-top: 1px solid #1f1f1f;&#10;        }&#10;        .status-item {&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: space-between;&#10;            padding: 8px 0;&#10;            font-size: 12px;&#10;            color: #888888;&#10;        }&#10;        .status-label {&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 6px;&#10;        }&#10;        .status-value {&#10;            color: #10b981;&#10;            font-weight: 600;&#10;        }&#10;        .main-content {&#10;            flex: 1;&#10;            margin-left: 260px;&#10;            padding: 0;&#10;            position: relative;&#10;        }&#10;        .top-bar {&#10;            display: flex;&#10;            justify-content: flex-end;&#10;            align-items: center;&#10;            padding: 16px 48px;&#10;            gap: 12px;&#10;            border-bottom: 1px solid #1f1f1f;&#10;        }&#10;        .connected-badge {&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 8px;&#10;            background: #8b5cf6;&#10;            color: #ffffff;&#10;            padding: 8px 16px;&#10;            border-radius: 8px;&#10;            font-size: 13px;&#10;            font-weight: 600;&#10;        }&#10;        .connected-badge.disconnected {&#10;            background: #333333;&#10;            color: #888888;&#10;        }&#10;        .icon-button {&#10;            width: 36px;&#10;            height: 36px;&#10;            background: transparent;&#10;            border: 1px solid #333333;&#10;            border-radius: 8px;&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            cursor: pointer;&#10;            color: #888888;&#10;            transition: all 0.2s;&#10;        }&#10;        .icon-button:hover {&#10;            background: #1a1a1a;&#10;            border-color: #555555;&#10;            color: #ffffff;&#10;        }&#10;        .content-wrapper {&#10;            padding: 40px 48px;&#10;        }&#10;        .page-header {&#10;            margin-bottom: 32px;&#10;        }&#10;        .page-title {&#10;            font-size: 28px;&#10;            font-weight: 700;&#10;            margin-bottom: 8px;&#10;            color: #ffffff;&#10;        }&#10;        .page-subtitle {&#10;            font-size: 15px;&#10;            color: #888888;&#10;        }&#10;        .mode-toggle {&#10;            display: flex;&#10;            gap: 0;&#10;            margin-bottom: 32px;&#10;            width: fit-content;&#10;            background: #1a1a1a;&#10;            border-radius: 10px;&#10;            padding: 4px;&#10;        }&#10;        .mode-button {&#10;            display: flex;&#10;            align-items: center;&#10;            gap: 8px;&#10;            background: transparent;&#10;            color: #888888;&#10;            border: none;&#10;            border-radius: 8px;&#10;            padding: 10px 20px;&#10;            font-size: 14px;&#10;            font-weight: 600;&#10;            cursor: pointer;&#10;            transition: all 0.2s;&#10;        }&#10;        .mode-button.active {&#10;            background: #8b5cf6;&#10;            color: #ffffff;&#10;        }&#10;        .mode-button i {&#10;            font-size: 16px;&#10;        }&#10;        .form-section {&#10;            margin-bottom: 24px;&#10;        }&#10;        .form-label {&#10;            display: block;&#10;            font-size: 13px;&#10;            font-weight: 600;&#10;            color: #cccccc;&#10;            margin-bottom: 12px;&#10;        }&#10;        .prompt-input {&#10;            width: 100%;&#10;            background: #1a1a1a;&#10;            border: 1px solid #2a2a2a;&#10;            border-radius: 12px;&#10;            padding: 16px 20px;&#10;            color: #ffffff;&#10;            font-size: 14px;&#10;            line-height: 1.8;&#10;            resize: vertical;&#10;            min-height: 140px;&#10;            transition: all 0.2s;&#10;            font-family: inherit;&#10;        }&#10;        .prompt-input:focus {&#10;            outline: none;&#10;            border-color: #8b5cf6;&#10;            box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);&#10;        }&#10;        .prompt-input::placeholder {&#10;            color: #555555;&#10;        }&#10;        .hint-text {&#10;            font-size: 12px;&#10;            color: #666666;&#10;            margin-top: 8px;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;app-container&quot;&gt;&#10;        &lt;div class=&quot;sidebar&quot;&gt;&#10;            &lt;div class=&quot;logo-section&quot;&gt;&#10;                &lt;div class=&quot;logo&quot;&gt;&#10;                    &lt;div class=&quot;logo-icon&quot;&gt;&lt;i class=&quot;bi bi-robot&quot;&gt;&lt;/i&gt;&lt;/div&gt;&#10;                    &lt;div class=&quot;logo-text&quot;&gt;&#10;                        &lt;span class=&quot;logo-title&quot;&gt;Automation AI-Powered&lt;/span&gt;&#10;                        &lt;span class=&quot;logo-subtitle&quot;&gt;Browser Testing&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;nav-section&quot;&gt;&#10;                &lt;div class=&quot;nav-title&quot;&gt;Navigation&lt;/div&gt;&#10;                &lt;a href=&quot;#&quot; class=&quot;nav-link active&quot;&gt;&lt;i class=&quot;bi bi-house&quot;&gt;&lt;/i&gt; Home&lt;/a&gt;&#10;                &lt;a href=&quot;#&quot; class=&quot;nav-link&quot;&gt;&lt;i class=&quot;bi bi-clock-history&quot;&gt;&lt;/i&gt; History&lt;/a&gt;&#10;                &lt;a href=&quot;#&quot; class=&quot;nav-link&quot;&gt;&lt;i class=&quot;bi bi-download&quot;&gt;&lt;/i&gt; Download Agent&lt;/a&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;sidebar-footer&quot;&gt;&#10;                &lt;div class=&quot;status-item&quot;&gt;&#10;                    &lt;span class=&quot;status-label&quot;&gt;&lt;i class=&quot;bi bi-wifi&quot;&gt;&lt;/i&gt; Server&lt;/span&gt;&#10;                    &lt;span class=&quot;status-value&quot;&gt;Online&lt;/span&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;main-content&quot;&gt;&#10;            &lt;div class=&quot;top-bar&quot;&gt;&#10;                &lt;div class=&quot;connected-badge&quot; id=&quot;connection-status&quot;&gt;Connected&lt;/div&gt;&#10;                &lt;button class=&quot;icon-button&quot;&gt;&lt;i class=&quot;bi bi-gear&quot;&gt;&lt;/i&gt;&lt;/button&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;content-wrapper&quot;&gt;&#10;                &lt;div class=&quot;page-header&quot;&gt;&#10;                    &lt;div class=&quot;page-title&quot;&gt;Automation AI-Powered&lt;/div&gt;&#10;                    &lt;div class=&quot;page-subtitle&quot;&gt;Natural language to browser automation&lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;mode-toggle&quot;&gt;&#10;                    &lt;button class=&quot;mode-button active&quot; id=&quot;headless-btn&quot;&gt;&lt;i class=&quot;bi bi-eye-slash&quot;&gt;&lt;/i&gt; Headless&lt;/button&gt;&#10;                    &lt;button class=&quot;mode-button&quot; id=&quot;headed-btn&quot;&gt;&lt;i class=&quot;bi bi-eye&quot;&gt;&lt;/i&gt; Headed&lt;/button&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-section&quot;&gt;&#10;                    &lt;label class=&quot;form-label&quot; for=&quot;command&quot;&gt;Test Command&lt;/label&gt;&#10;                    &lt;textarea class=&quot;prompt-input&quot; id=&quot;command&quot; placeholder=&quot;Type your test scenario in natural language...&quot;&gt;&lt;/textarea&gt;&#10;                    &lt;div class=&quot;hint-text&quot;&gt;e.g. Open Google and search for 'Selenium'&lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-section&quot;&gt;&#10;                    &lt;label class=&quot;form-label&quot; for=&quot;browser&quot;&gt;Browser&lt;/label&gt;&#10;                    &lt;select class=&quot;form-select&quot; id=&quot;browser&quot;&gt;&#10;                        &lt;option value=&quot;chromium&quot;&gt;Chromium&lt;/option&gt;&#10;                        &lt;option value=&quot;firefox&quot;&gt;Firefox&lt;/option&gt;&#10;                        &lt;option value=&quot;webkit&quot;&gt;WebKit&lt;/option&gt;&#10;                    &lt;/select&gt;&#10;                &lt;/div&gt;&#10;                &lt;form id=&quot;execute-form&quot;&gt;&#10;                    &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Execute&lt;/button&gt;&#10;                &lt;/form&gt;&#10;                &lt;div class=&quot;form-section&quot;&gt;&#10;                    &lt;a href=&quot;/api/agent/download&quot; class=&quot;btn btn-secondary&quot;&gt;Download local_agent.py&lt;/a&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-section&quot;&gt;&#10;                    &lt;h2&gt;Test History&lt;/h2&gt;&#10;                    &lt;div id=&quot;history&quot;&gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://cdn.socket.io/4.0.0/socket.io.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        const socket = io();&#10;        socket.on('connect', () =&gt; {&#10;            document.getElementById('connection-status').textContent = 'Connected';&#10;            document.getElementById('connection-status').classList.remove('disconnected');&#10;        });&#10;        socket.on('disconnect', () =&gt; {&#10;            document.getElementById('connection-status').textContent = 'Disconnected';&#10;            document.getElementById('connection-status').classList.add('disconnected');&#10;        });&#10;        socket.on('execution_status', (data) =&gt; {&#10;            // Optionally update UI with execution status&#10;        });&#10;        socket.on('execution_complete', (data) =&gt; {&#10;            // Optionally update UI with execution result&#10;        });&#10;        function fetchHistory() {&#10;            fetch('/api/history')&#10;                .then(response =&gt; response.json())&#10;                .then(data =&gt; {&#10;                    const historyDiv = document.getElementById('history');&#10;                    historyDiv.innerHTML = '';&#10;                    data.forEach(row =&gt; {&#10;                        const card = document.createElement('div');&#10;                        card.className = 'card mb-3';&#10;                        card.innerHTML = `&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;h5 class=&quot;card-title&quot;&gt;Test ID: ${row.id}&lt;/h5&gt;&#10;                                &lt;p class=&quot;card-text&quot;&gt;&lt;strong&gt;Command:&lt;/strong&gt; ${row.command}&lt;/p&gt;&#10;                                &lt;p class=&quot;card-text&quot;&gt;&lt;strong&gt;Status:&lt;/strong&gt; ${row.status}&lt;/p&gt;&#10;                                &lt;p class=&quot;card-text&quot;&gt;&lt;strong&gt;Logs:&lt;/strong&gt; ${row.logs}&lt;/p&gt;&#10;                                ${row.screenshot_path ? `&lt;img src=&quot;${row.screenshot_path}&quot; class=&quot;img-fluid&quot; alt=&quot;Screenshot&quot;&gt;` : ''}&#10;                            &lt;/div&gt;&#10;                        `;&#10;                        historyDiv.appendChild(card);&#10;                    });&#10;                });&#10;        }&#10;        document.getElementById('execute-form').addEventListener('submit', (e) =&gt; {&#10;            e.preventDefault();&#10;            const command = document.getElementById('command').value;&#10;            const browser = document.getElementById('browser').value;&#10;            const mode = document.getElementById('headless-btn').classList.contains('active') ? 'headless' : 'headed';&#10;            fetch('/api/execute', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json'&#10;                },&#10;                body: JSON.stringify({ command, browser, mode })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                // Optionally handle response&#10;                fetchHistory();&#10;            });&#10;        });&#10;        document.getElementById('headless-btn').addEventListener('click', () =&gt; {&#10;            document.getElementById('headless-btn').classList.add('active');&#10;            document.getElementById('headed-btn').classList.remove('active');&#10;        });&#10;        document.getElementById('headed-btn').addEventListener('click', () =&gt; {&#10;            document.getElementById('headed-btn').classList.add('active');&#10;            document.getElementById('headless-btn').classList.remove('active');&#10;        });&#10;        fetchHistory();&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;'''&#10;&#10;# --- CodeValidator ---&#10;class CodeValidator:&#10;    ALLOWED_IMPORTS = {&#10;        'playwright.async_api', 'asyncio', 'time', 'datetime', 're', 'json', 'base64'&#10;    }&#10;    DANGEROUS_MODULES = {&#10;        'os', 'sys', 'subprocess', 'shutil', 'eval', 'exec', 'compile', '__import__', 'open', 'file', 'input', 'execfile', 'reload', 'importlib', 'pickle', 'shelve', 'socket', 'urllib', 'requests', 'http', 'ftplib', 'telnetlib', 'smtplib', 'poplib', 'imaplib'&#10;    }&#10;    def __init__(self):&#10;        self.errors = []&#10;    def validate(self, code):&#10;        self.errors = []&#10;        if not code or not isinstance(code, str):&#10;            self.errors.append(&quot;Code must be a non-empty string&quot;)&#10;            return False&#10;        if 'async def run_test' not in code:&#10;            self.errors.append(&quot;Code must contain 'async def run_test' function&quot;)&#10;            return False&#10;        if 'playwright.async_api import async_playwright' not in code:&#10;            self.errors.append(&quot;Code must use 'from playwright.async_api import async_playwright'&quot;)&#10;            return False&#10;        for module in self.DANGEROUS_MODULES:&#10;            patterns = [f'import {module}', f'from {module}', f'__import__(&quot;{module}&quot;)', f&quot;__import__('{module}')&quot;]&#10;            for pattern in patterns:&#10;                if pattern in code:&#10;                    self.errors.append(f&quot;Dangerous import detected: {module}&quot;)&#10;                    return False&#10;        dangerous_patterns = [&#10;            (r'\beval\s*\(', 'eval() function'), (r'\bexec\s*\(', 'exec() function'), (r'\b__import__\s*\(', '__import__() function'), (r'\bcompile\s*\(', 'compile() function'), (r'\bopen\s*\(', 'open() function (file access)'), (r'\.system\s*\(', 'system() call'), (r'\.popen\s*\(', 'popen() call'), (r'\.spawn\s*\(', 'spawn() call'),&#10;        ]&#10;        for pattern, name in dangerous_patterns:&#10;            if re.search(pattern, code, re.IGNORECASE):&#10;                self.errors.append(f&quot;Dangerous pattern detected: {name}&quot;)&#10;                return False&#10;        try:&#10;            tree = ast.parse(code)&#10;            for node in ast.walk(tree):&#10;                if isinstance(node, ast.Import):&#10;                    for alias in node.names:&#10;                        if not self._is_allowed_import(alias.name):&#10;                            self.errors.append(f&quot;Disallowed import: {alias.name}&quot;)&#10;                            return False&#10;                elif isinstance(node, ast.ImportFrom):&#10;                    if node.module and not self._is_allowed_import(node.module):&#10;                        self.errors.append(f&quot;Disallowed import from: {node.module}&quot;)&#10;                        return False&#10;                elif isinstance(node, ast.Call):&#10;                    if isinstance(node.func, ast.Name):&#10;                        if node.func.id in ['eval', 'exec', 'compile', '__import__', 'open']:&#10;                            self.errors.append(f&quot;Dangerous function call: {node.func.id}&quot;)&#10;                            return False&#10;        except SyntaxError as e:&#10;            self.errors.append(f&quot;Syntax error: {str(e)}&quot;)&#10;            return False&#10;        return True&#10;    def _is_allowed_import(self, module_name):&#10;        for allowed in self.ALLOWED_IMPORTS:&#10;            if module_name.startswith(allowed):&#10;                return True&#10;        return False&#10;    def get_errors(self):&#10;        return self.errors&#10;&#10;# --- ServerExecutor ---&#10;class ServerExecutor:&#10;    def execute(self, code, browser_name='chromium', headless=True):&#10;        try:&#10;            validator = CodeValidator()&#10;            if not validator.validate(code):&#10;                return {&#10;                    'success': False,&#10;                    'logs': ['Security validation failed: ' + '; '.join(validator.get_errors())],&#10;                    'screenshot': None&#10;                }&#10;            restricted_globals = {&#10;                '__builtins__': {&#10;                    'True': True, 'False': False, 'None': None, 'dict': dict, 'list': list, 'str': str, 'int': int, 'float': float, 'bool': bool, 'len': len, 'range': range, 'enumerate': enumerate, 'zip': zip, 'Exception': Exception, 'ValueError': ValueError, 'TypeError': TypeError, 'KeyError': KeyError, 'AttributeError': AttributeError, 'getattr': getattr, 'setattr': setattr, 'hasattr': hasattr, 'print': print, '__import__': __import__,&#10;                }&#10;            }&#10;            local_vars = {}&#10;            exec(code, restricted_globals, local_vars)&#10;            if 'run_test' not in local_vars:&#10;                return {&#10;                    'success': False,&#10;                    'logs': ['Error: Generated code must contain a run_test function'],&#10;                    'screenshot': None&#10;                }&#10;            run_test = local_vars['run_test']&#10;            result = asyncio.run(run_test(browser_name=browser_name, headless=headless))&#10;            return result&#10;        except Exception as e:&#10;            return {&#10;                'success': False,&#10;                'logs': [f'Execution error: {str(e)}'],&#10;                'screenshot': None&#10;            }&#10;&#10;# --- Flask App ---&#10;app = Flask(__name__)&#10;app.config['SECRET_KEY'] = os.environ.get('SESSION_SECRET', 'dev-secret-key')&#10;app.config['UPLOAD_FOLDER'] = 'uploads'&#10;CORS(app)&#10;socketio = SocketIO(app, cors_allowed_origins=&quot;*&quot;)&#10;&#10;os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)&#10;os.makedirs(os.path.join(app.config['UPLOAD_FOLDER'], 'screenshots'), exist_ok=True)&#10;os.makedirs(os.path.join(app.config['UPLOAD_FOLDER'], 'logs'), exist_ok=True)&#10;&#10;openai_api_key = os.environ.get('OPENAI_API_KEY','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')&#10;try:&#10;    from openai import OpenAI&#10;    client = OpenAI(api_key=openai_api_key) if openai_api_key else None&#10;except ImportError:&#10;    client = None&#10;&#10;connected_agents = {}&#10;&#10;def init_db():&#10;    conn = sqlite3.connect('automation.db')&#10;    c = conn.cursor()&#10;    c.execute('''CREATE TABLE IF NOT EXISTS test_history&#10;                 (id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;                  command TEXT NOT NULL,&#10;                  generated_code TEXT NOT NULL,&#10;                  browser TEXT,&#10;                  mode TEXT,&#10;                  execution_location TEXT,&#10;                  status TEXT,&#10;                  logs TEXT,&#10;                  screenshot_path TEXT,&#10;                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')&#10;    conn.commit()&#10;    conn.close()&#10;&#10;init_db()&#10;&#10;def generate_playwright_code(natural_language_command, browser='chromium'):&#10;    if not client:&#10;        raise Exception(&quot;OpenAI API key not configured. Please set the OPENAI_API_KEY environment variable.&quot;)&#10;    try:&#10;        response = client.chat.completions.create(&#10;            model=&quot;gpt-4o-mini&quot;,&#10;            messages=[&#10;                {&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;You are an expert at converting natural language commands into Playwright Python code. Generate complete, executable Playwright code that: 1. Uses async/await syntax 2. Includes proper browser launch with the specified browser 3. Has error handling 4. Returns a dict with 'success', 'logs', and 'screenshot' keys 5. Takes screenshot on success or error 6. The code should be a complete async function named 'run_test' that takes browser_name and headless parameters. Only return the function code, no explanations.&quot;},&#10;                {&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: f&quot;Convert this to Playwright code for {browser}: {natural_language_command}&quot;}&#10;            ],&#10;            temperature=0.3&#10;        )&#10;        code = response.choices[0].message.content.strip()&#10;        if code.startswith('```python'):&#10;            code = code[9:]&#10;        if code.startswith('```'):&#10;            code = code[3:]&#10;        if code.endswith('```'):&#10;            code = code[:-3]&#10;        return code.strip()&#10;    except Exception as e:&#10;        raise Exception(f&quot;OpenAI API error: {str(e)}&quot;)&#10;&#10;@app.route('/')&#10;def index():&#10;    return Response(INDEX_HTML, mimetype='text/html')&#10;&#10;@app.route('/api/history')&#10;def get_history():&#10;    conn = sqlite3.connect('automation.db')&#10;    c = conn.cursor()&#10;    c.execute('SELECT * FROM test_history ORDER BY created_at DESC LIMIT 50')&#10;    rows = c.fetchall()&#10;    conn.close()&#10;    history = []&#10;    for row in rows:&#10;        history.append({&#10;            'id': row[0], 'command': row[1], 'generated_code': row[2], 'browser': row[3], 'mode': row[4], 'execution_location': row[5], 'status': row[6], 'logs': row[7], 'screenshot_path': row[8], 'created_at': row[9]&#10;        })&#10;    return jsonify(history)&#10;&#10;@app.route('/api/execute', methods=['POST'])&#10;def execute_test():&#10;    data = request.json&#10;    command = data.get('command')&#10;    browser = data.get('browser', 'chromium')&#10;    mode = data.get('mode', 'headless')&#10;    execution_location = data.get('execution_location', 'server')&#10;    if not command:&#10;        return jsonify({'error': 'Command is required'}), 400&#10;    try:&#10;        generated_code = generate_playwright_code(command, browser)&#10;        validator = CodeValidator()&#10;        if not validator.validate(generated_code):&#10;            error_msg = &quot;Generated code failed security validation: &quot; + &quot;; &quot;.join(validator.get_errors())&#10;            return jsonify({'error': error_msg}), 400&#10;        conn = sqlite3.connect('automation.db')&#10;        c = conn.cursor()&#10;        c.execute('INSERT INTO test_history (command, generated_code, browser, mode, execution_location, status) VALUES (?, ?, ?, ?, ?, ?)', (command, generated_code, browser, mode, execution_location, 'pending'))&#10;        test_id = c.lastrowid&#10;        conn.commit()&#10;        conn.close()&#10;        if execution_location == 'server':&#10;            socketio.start_background_task(execute_on_server, test_id, generated_code, browser, mode)&#10;        else:&#10;            socketio.emit('execute_on_agent', {'test_id': test_id, 'code': generated_code, 'browser': browser, 'mode': mode})&#10;        return jsonify({'test_id': test_id, 'code': generated_code})&#10;    except Exception as e:&#10;        return jsonify({'error': str(e)}), 500&#10;&#10;def execute_on_server(test_id, code, browser, mode):&#10;    executor = ServerExecutor()&#10;    headless = mode == 'headless'&#10;    socketio.emit('execution_status', {'test_id': test_id, 'status': 'running', 'message': f'Executing on server in {mode} mode...'})&#10;    result = executor.execute(code, browser, headless)&#10;    screenshot_path = None&#10;    if result.get('screenshot'):&#10;        screenshot_path = f&quot;screenshots/test_{test_id}.png&quot;&#10;        with open(os.path.join(app.config['UPLOAD_FOLDER'], screenshot_path), 'wb') as f:&#10;            f.write(result['screenshot'])&#10;    logs_json = json.dumps(result.get('logs', []))&#10;    status = 'success' if result.get('success') else 'failed'&#10;    conn = sqlite3.connect('automation.db')&#10;    c = conn.cursor()&#10;    c.execute('UPDATE test_history SET status=?, logs=?, screenshot_path=? WHERE id=?', (status, logs_json, screenshot_path, test_id))&#10;    conn.commit()&#10;    conn.close()&#10;    socketio.emit('execution_complete', {'test_id': test_id, 'status': status, 'logs': result.get('logs', []), 'screenshot_path': screenshot_path})&#10;&#10;@app.route('/uploads/&lt;path:filename&gt;')&#10;def uploaded_file(filename):&#10;    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)&#10;&#10;@app.route('/api/agent/download')&#10;def download_agent():&#10;    return send_from_directory('.', 'local_agent.py', as_attachment=True)&#10;&#10;@socketio.on('connect')&#10;def handle_connect():&#10;    print(f'Client connected: {request.sid}')&#10;    emit('connected', {'sid': request.sid})&#10;&#10;@socketio.on('disconnect')&#10;def handle_disconnect():&#10;    print(f'Client disconnected: {request.sid}')&#10;    if request.sid in connected_agents:&#10;        del connected_agents[request.sid]&#10;        print(f'Updated connected_agents after disconnect: {connected_agents}')&#10;        socketio.emit('agents_update', {'agents': list(connected_agents.values())})&#10;&#10;@socketio.on('agent_register')&#10;def handle_agent_register(data):&#10;    agent_id = data.get('agent_id')&#10;    connected_agents[request.sid] = {'agent_id': agent_id, 'browsers': data.get('browsers', []), 'connected_at': datetime.now().isoformat()}&#10;    print(f'Agent registered: {agent_id}')&#10;    print(f'Updated connected_agents after register: {connected_agents}')&#10;    emit('agent_registered', {'status': 'success'})&#10;    print(f'Emitting agents_update: {list(connected_agents.values())}')&#10;    socketio.emit('agents_update', {'agents': list(connected_agents.values())})&#10;&#10;@socketio.on('agent_result')&#10;def handle_agent_result(data):&#10;    test_id = data.get('test_id')&#10;    success = data.get('success')&#10;    logs = data.get('logs', [])&#10;    screenshot_data = data.get('screenshot')&#10;    screenshot_path = None&#10;    if screenshot_data:&#10;        screenshot_path = f&quot;screenshots/test_{test_id}.png&quot;&#10;        screenshot_bytes = base64.b64decode(screenshot_data)&#10;        with open(os.path.join(app.config['UPLOAD_FOLDER'], screenshot_path), 'wb') as f:&#10;            f.write(screenshot_bytes)&#10;    logs_json = json.dumps(logs)&#10;    status = 'success' if success else 'failed'&#10;    conn = sqlite3.connect('automation.db')&#10;    c = conn.cursor()&#10;    c.execute('UPDATE test_history SET status=?, logs=?, screenshot_path=? WHERE id=?', (status, logs_json, screenshot_path, test_id))&#10;    conn.commit()&#10;    conn.close()&#10;    socketio.emit('execution_complete', {'test_id': test_id, 'status': status, 'logs': logs, 'screenshot_path': screenshot_path})&#10;&#10;@socketio.on('agent_log')&#10;def handle_agent_log(data):&#10;    socketio.emit('execution_status', {'test_id': data.get('test_id'), 'status': 'running', 'message': data.get('message')})&#10;&#10;if __name__ == '__main__':&#10;    socketio.run(app, port=6745, debug=True, allow_unsafe_werkzeug=True)&#10;&#10;# --- End of packed file ---" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>